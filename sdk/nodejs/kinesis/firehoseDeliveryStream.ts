// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Kinesis Firehose Delivery Stream resource. Amazon Kinesis Firehose is a fully managed, elastic service to easily deliver real-time data streams to destinations such as Amazon S3 and Amazon Redshift.
 * 
 * For more details, see the [Amazon Kinesis Firehose Documentation][1].
 * 
 * ## Example Usage
 * 
 * ### Extended S3 Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const firehoseRole = new aws.iam.Role("firehose_role", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "firehose.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const lambdaIam = new aws.iam.Role("lambda_iam", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const bucket = new aws.s3.Bucket("bucket", {
 *     acl: "private",
 *     bucket: "tf-test-bucket",
 * });
 * const lambdaProcessor = new aws.lambda.Function("lambda_processor", {
 *     code: new pulumi.asset.FileArchive("lambda.zip"),
 *     name: "firehose_lambda_processor",
 *     handler: "exports.handler",
 *     role: lambdaIam.arn,
 *     runtime: "nodejs8.10",
 * });
 * const extendedS3Stream = new aws.kinesis.FirehoseDeliveryStream("extended_s3_stream", {
 *     destination: "extended_s3",
 *     extendedS3Configuration: {
 *         bucketArn: bucket.arn,
 *         processingConfiguration: {
 *             enabled: true,
 *             processors: [{
 *                 parameters: [{
 *                     parameterName: "LambdaArn",
 *                     parameterValue: lambdaProcessor.arn.apply(arn => `${arn}:$LATEST`),
 *                 }],
 *                 type: "Lambda",
 *             }],
 *         },
 *         roleArn: firehoseRole.arn,
 *     },
 * });
 * ```
 * 
 * ### S3 Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const firehoseRole = new aws.iam.Role("firehose_role", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "firehose.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const bucket = new aws.s3.Bucket("bucket", {
 *     acl: "private",
 *     bucket: "tf-test-bucket",
 * });
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("test_stream", {
 *     destination: "s3",
 *     s3Configuration: {
 *         bucketArn: bucket.arn,
 *         roleArn: firehoseRole.arn,
 *     },
 * });
 * ```
 * 
 * ### Redshift Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testCluster = new aws.redshift.Cluster("test_cluster", {
 *     clusterIdentifier: "tf-redshift-cluster-%d",
 *     clusterType: "single-node",
 *     databaseName: "test",
 *     masterPassword: "T3stPass",
 *     masterUsername: "testuser",
 *     nodeType: "dc1.large",
 * });
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("test_stream", {
 *     destination: "redshift",
 *     redshiftConfiguration: {
 *         clusterJdbcurl: pulumi.all([testCluster.endpoint, testCluster.databaseName]).apply(([endpoint, databaseName]) => `jdbc:redshift://${endpoint}/${databaseName}`),
 *         copyOptions: "delimiter '|'", // the default delimiter
 *         dataTableColumns: "test-col",
 *         dataTableName: "test-table",
 *         password: "T3stPass",
 *         roleArn: aws_iam_role_firehose_role.arn,
 *         s3BackupConfiguration: {
 *             bucketArn: aws_s3_bucket_bucket.arn,
 *             bufferInterval: 300,
 *             bufferSize: 15,
 *             compressionFormat: "GZIP",
 *             roleArn: aws_iam_role_firehose_role.arn,
 *         },
 *         s3BackupMode: "Enabled",
 *         username: "testuser",
 *     },
 *     s3Configuration: {
 *         bucketArn: aws_s3_bucket_bucket.arn,
 *         bufferInterval: 400,
 *         bufferSize: 10,
 *         compressionFormat: "GZIP",
 *         roleArn: aws_iam_role_firehose_role.arn,
 *     },
 * });
 * ```
 * 
 * ### Elasticsearch Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testCluster = new aws.elasticsearch.Domain("test_cluster", {
 *     domainName: "firehose-es-test",
 * });
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("test_stream", {
 *     destination: "elasticsearch",
 *     elasticsearchConfiguration: {
 *         domainArn: testCluster.arn,
 *         indexName: "test",
 *         processingConfiguration: {
 *             enabled: true,
 *             processors: [{
 *                 parameters: [{
 *                     parameterName: "LambdaArn",
 *                     parameterValue: aws_lambda_function_lambda_processor.arn.apply(arn => `${arn}:$LATEST`),
 *                 }],
 *                 type: "Lambda",
 *             }],
 *         },
 *         roleArn: aws_iam_role_firehose_role.arn,
 *         typeName: "test",
 *     },
 *     s3Configuration: {
 *         bucketArn: aws_s3_bucket_bucket.arn,
 *         bufferInterval: 400,
 *         bufferSize: 10,
 *         compressionFormat: "GZIP",
 *         roleArn: aws_iam_role_firehose_role.arn,
 *     },
 * });
 * ```
 * 
 * 
 * ### Splunk Destination
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * 
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("test_stream", {
 *     destination: "splunk",
 *     s3Configuration: {
 *         bucketArn: aws_s3_bucket_bucket.arn,
 *         bufferInterval: 400,
 *         bufferSize: 10,
 *         compressionFormat: "GZIP",
 *         roleArn: aws_iam_role_firehose.arn,
 *     },
 *     splunkConfiguration: {
 *         hecAcknowledgmentTimeout: 600,
 *         hecEndpoint: "https://http-inputs-mydomain.splunkcloud.com:443",
 *         hecEndpointType: "Event",
 *         hecToken: "51D4DA16-C61B-4F5F-8EC7-ED4301342A4A",
 *         s3BackupMode: "FailedEventsOnly",
 *     },
 * });
 * ```
 */
export class FirehoseDeliveryStream extends pulumi.CustomResource {
    /**
     * Get an existing FirehoseDeliveryStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: pulumi.WrappedObject<FirehoseDeliveryStreamState>, opts?: pulumi.CustomResourceOptions): FirehoseDeliveryStream {
        return new FirehoseDeliveryStream(name, <any>state, { ...opts, id: id });
    }

    /**
     * The Amazon Resource Name (ARN) specifying the Stream
     */
    public readonly arn: pulumi.Output<string>;
    /**
     * This is the destination to where the data is delivered. The only options are `s3` (Deprecated, use `extended_s3` instead), `extended_s3`, `redshift`, `elasticsearch`, and `splunk`.
     */
    public readonly destination: pulumi.Output<string>;
    public readonly destinationId: pulumi.Output<string>;
    public readonly elasticsearchConfiguration: pulumi.Output<{ bufferingInterval?: number, bufferingSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, domainArn: string, indexName: string, indexRotationPeriod?: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, roleArn: string, s3BackupMode?: string, typeName?: string } | undefined>;
    /**
     * Enhanced configuration options for the s3 destination. More details are given below.
     */
    public readonly extendedS3Configuration: pulumi.Output<{ bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, dataFormatConversionConfiguration?: { enabled?: boolean, inputFormatConfiguration: { deserializer: { hiveJsonSerDe?: { timestampFormats?: string[] }, openXJsonSerDe?: { caseInsensitive?: boolean, columnToJsonKeyMappings?: {[key: string]: string}, convertDotsInJsonKeysToUnderscores?: boolean } } }, outputFormatConfiguration: { serializer: { orcSerDe?: { blockSizeBytes?: number, bloomFilterColumns?: string[], bloomFilterFalsePositiveProbability?: number, compression?: string, dictionaryKeyThreshold?: number, enablePadding?: boolean, formatVersion?: string, paddingTolerance?: number, rowIndexStride?: number, stripeSizeBytes?: number }, parquetSerDe?: { blockSizeBytes?: number, compression?: string, enableDictionaryCompression?: boolean, maxPaddingBytes?: number, pageSizeBytes?: number, writerVersion?: string } } }, schemaConfiguration: { catalogId: string, databaseName: string, region: string, roleArn: string, tableName: string, versionId?: string } }, errorOutputPrefix?: string, kmsKeyArn?: string, prefix?: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, roleArn: string, s3BackupConfiguration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }, s3BackupMode?: string } | undefined>;
    /**
     * Allows the ability to specify the kinesis stream that is used as the source of the firehose delivery stream.
     */
    public readonly kinesisSourceConfiguration: pulumi.Output<{ kinesisStreamArn: string, roleArn: string } | undefined>;
    /**
     * A name to identify the stream. This is unique to the
     * AWS account and region the Stream is created in.
     */
    public readonly name: pulumi.Output<string>;
    /**
     * Configuration options if redshift is the destination.
     * Using `redshift_configuration` requires the user to also specify a
     * `s3_configuration` block. More details are given below.
     */
    public readonly redshiftConfiguration: pulumi.Output<{ cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, clusterJdbcurl: string, copyOptions?: string, dataTableColumns?: string, dataTableName: string, password: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, roleArn: string, s3BackupConfiguration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }, s3BackupMode?: string, username: string } | undefined>;
    /**
     * Configuration options for the s3 destination (or the intermediate bucket if the destination
     * is redshift). More details are given below.
     */
    public readonly s3Configuration: pulumi.Output<{ bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string } | undefined>;
    public readonly splunkConfiguration: pulumi.Output<{ cloudwatchLoggingOptions: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, hecAcknowledgmentTimeout?: number, hecEndpoint: string, hecEndpointType?: string, hecToken: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, s3BackupMode?: string } | undefined>;
    /**
     * A mapping of tags to assign to the resource.
     */
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Specifies the table version for the output data schema. Defaults to `LATEST`.
     */
    public readonly versionId: pulumi.Output<string>;

    /**
     * Create a FirehoseDeliveryStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: pulumi.WrappedObject<FirehoseDeliveryStreamArgs>, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: pulumi.WrappedObject<FirehoseDeliveryStreamArgs> | pulumi.WrappedObject<FirehoseDeliveryStreamState>, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: FirehoseDeliveryStreamState = argsOrState as FirehoseDeliveryStreamState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["destinationId"] = state ? state.destinationId : undefined;
            inputs["elasticsearchConfiguration"] = state ? state.elasticsearchConfiguration : undefined;
            inputs["extendedS3Configuration"] = state ? state.extendedS3Configuration : undefined;
            inputs["kinesisSourceConfiguration"] = state ? state.kinesisSourceConfiguration : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["redshiftConfiguration"] = state ? state.redshiftConfiguration : undefined;
            inputs["s3Configuration"] = state ? state.s3Configuration : undefined;
            inputs["splunkConfiguration"] = state ? state.splunkConfiguration : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as FirehoseDeliveryStreamArgs | undefined;
            if (!args || args.destination === undefined) {
                throw new Error("Missing required property 'destination'");
            }
            inputs["arn"] = args ? args.arn : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["destinationId"] = args ? args.destinationId : undefined;
            inputs["elasticsearchConfiguration"] = args ? args.elasticsearchConfiguration : undefined;
            inputs["extendedS3Configuration"] = args ? args.extendedS3Configuration : undefined;
            inputs["kinesisSourceConfiguration"] = args ? args.kinesisSourceConfiguration : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redshiftConfiguration"] = args ? args.redshiftConfiguration : undefined;
            inputs["s3Configuration"] = args ? args.s3Configuration : undefined;
            inputs["splunkConfiguration"] = args ? args.splunkConfiguration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["versionId"] = args ? args.versionId : undefined;
        }
        super("aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirehoseDeliveryStream resources.
 */
export interface FirehoseDeliveryStreamState {
    /**
     * The Amazon Resource Name (ARN) specifying the Stream
     */
    readonly arn?: string;
    /**
     * This is the destination to where the data is delivered. The only options are `s3` (Deprecated, use `extended_s3` instead), `extended_s3`, `redshift`, `elasticsearch`, and `splunk`.
     */
    readonly destination?: string;
    readonly destinationId?: string;
    readonly elasticsearchConfiguration?: { bufferingInterval?: number, bufferingSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, domainArn: string, indexName: string, indexRotationPeriod?: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, roleArn: string, s3BackupMode?: string, typeName?: string };
    /**
     * Enhanced configuration options for the s3 destination. More details are given below.
     */
    readonly extendedS3Configuration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, dataFormatConversionConfiguration?: { enabled?: boolean, inputFormatConfiguration: { deserializer: { hiveJsonSerDe?: { timestampFormats?: string[] }, openXJsonSerDe?: { caseInsensitive?: boolean, columnToJsonKeyMappings?: {[key: string]: string}, convertDotsInJsonKeysToUnderscores?: boolean } } }, outputFormatConfiguration: { serializer: { orcSerDe?: { blockSizeBytes?: number, bloomFilterColumns?: string[], bloomFilterFalsePositiveProbability?: number, compression?: string, dictionaryKeyThreshold?: number, enablePadding?: boolean, formatVersion?: string, paddingTolerance?: number, rowIndexStride?: number, stripeSizeBytes?: number }, parquetSerDe?: { blockSizeBytes?: number, compression?: string, enableDictionaryCompression?: boolean, maxPaddingBytes?: number, pageSizeBytes?: number, writerVersion?: string } } }, schemaConfiguration: { catalogId?: string, databaseName: string, region?: string, roleArn: string, tableName: string, versionId?: string } }, errorOutputPrefix?: string, kmsKeyArn?: string, prefix?: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, roleArn: string, s3BackupConfiguration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }, s3BackupMode?: string };
    /**
     * Allows the ability to specify the kinesis stream that is used as the source of the firehose delivery stream.
     */
    readonly kinesisSourceConfiguration?: { kinesisStreamArn: string, roleArn: string };
    /**
     * A name to identify the stream. This is unique to the
     * AWS account and region the Stream is created in.
     */
    readonly name?: string;
    /**
     * Configuration options if redshift is the destination.
     * Using `redshift_configuration` requires the user to also specify a
     * `s3_configuration` block. More details are given below.
     */
    readonly redshiftConfiguration?: { cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, clusterJdbcurl: string, copyOptions?: string, dataTableColumns?: string, dataTableName: string, password: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, roleArn: string, s3BackupConfiguration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }, s3BackupMode?: string, username: string };
    /**
     * Configuration options for the s3 destination (or the intermediate bucket if the destination
     * is redshift). More details are given below.
     */
    readonly s3Configuration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string };
    readonly splunkConfiguration?: { cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, hecAcknowledgmentTimeout?: number, hecEndpoint: string, hecEndpointType?: string, hecToken: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, s3BackupMode?: string };
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: {[key: string]: any};
    /**
     * Specifies the table version for the output data schema. Defaults to `LATEST`.
     */
    readonly versionId?: string;
}

/**
 * The set of arguments for constructing a FirehoseDeliveryStream resource.
 */
export interface FirehoseDeliveryStreamArgs {
    /**
     * The Amazon Resource Name (ARN) specifying the Stream
     */
    readonly arn?: string;
    /**
     * This is the destination to where the data is delivered. The only options are `s3` (Deprecated, use `extended_s3` instead), `extended_s3`, `redshift`, `elasticsearch`, and `splunk`.
     */
    readonly destination: string;
    readonly destinationId?: string;
    readonly elasticsearchConfiguration?: { bufferingInterval?: number, bufferingSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, domainArn: string, indexName: string, indexRotationPeriod?: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, roleArn: string, s3BackupMode?: string, typeName?: string };
    /**
     * Enhanced configuration options for the s3 destination. More details are given below.
     */
    readonly extendedS3Configuration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, dataFormatConversionConfiguration?: { enabled?: boolean, inputFormatConfiguration: { deserializer: { hiveJsonSerDe?: { timestampFormats?: string[] }, openXJsonSerDe?: { caseInsensitive?: boolean, columnToJsonKeyMappings?: {[key: string]: string}, convertDotsInJsonKeysToUnderscores?: boolean } } }, outputFormatConfiguration: { serializer: { orcSerDe?: { blockSizeBytes?: number, bloomFilterColumns?: string[], bloomFilterFalsePositiveProbability?: number, compression?: string, dictionaryKeyThreshold?: number, enablePadding?: boolean, formatVersion?: string, paddingTolerance?: number, rowIndexStride?: number, stripeSizeBytes?: number }, parquetSerDe?: { blockSizeBytes?: number, compression?: string, enableDictionaryCompression?: boolean, maxPaddingBytes?: number, pageSizeBytes?: number, writerVersion?: string } } }, schemaConfiguration: { catalogId?: string, databaseName: string, region?: string, roleArn: string, tableName: string, versionId?: string } }, errorOutputPrefix?: string, kmsKeyArn?: string, prefix?: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, roleArn: string, s3BackupConfiguration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }, s3BackupMode?: string };
    /**
     * Allows the ability to specify the kinesis stream that is used as the source of the firehose delivery stream.
     */
    readonly kinesisSourceConfiguration?: { kinesisStreamArn: string, roleArn: string };
    /**
     * A name to identify the stream. This is unique to the
     * AWS account and region the Stream is created in.
     */
    readonly name?: string;
    /**
     * Configuration options if redshift is the destination.
     * Using `redshift_configuration` requires the user to also specify a
     * `s3_configuration` block. More details are given below.
     */
    readonly redshiftConfiguration?: { cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, clusterJdbcurl: string, copyOptions?: string, dataTableColumns?: string, dataTableName: string, password: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, roleArn: string, s3BackupConfiguration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string }, s3BackupMode?: string, username: string };
    /**
     * Configuration options for the s3 destination (or the intermediate bucket if the destination
     * is redshift). More details are given below.
     */
    readonly s3Configuration?: { bucketArn: string, bufferInterval?: number, bufferSize?: number, cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, compressionFormat?: string, kmsKeyArn?: string, prefix?: string, roleArn: string };
    readonly splunkConfiguration?: { cloudwatchLoggingOptions?: { enabled?: boolean, logGroupName?: string, logStreamName?: string }, hecAcknowledgmentTimeout?: number, hecEndpoint: string, hecEndpointType?: string, hecToken: string, processingConfiguration?: { enabled?: boolean, processors?: { parameters?: { parameterName: string, parameterValue: string }[], type: string }[] }, retryDuration?: number, s3BackupMode?: string };
    /**
     * A mapping of tags to assign to the resource.
     */
    readonly tags?: {[key: string]: any};
    /**
     * Specifies the table version for the output data schema. Defaults to `LATEST`.
     */
    readonly versionId?: string;
}
